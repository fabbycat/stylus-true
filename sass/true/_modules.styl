use('lib/str-length.js')
// Test Module
// ===========




// Test Module
//  -----------
// / Test Modules are optional,
// / and can be used to group tests and other modules
// / for organizational purposes.
// / Modules can be nested for additional organization.
// / @access public
// / @group api-test
// / @param {string} $name - module name
// / @content Include all the tests & modules that are part of this module
// / @example scss
// /   // Module Group
// /   @include test-module('zip [function]') {
// /     // Test 1
// /     @include test('Returns two lists zipped together') {
// /       @include assert-equal(
// /         zip(a b c, 1 2 3),
// /         (a 1, b 2, c 3));
// /     }
//
// /     // Test 2
// /     @include test('Returns three zipped lists') {
// /       @include assert-equal(
// /         zip(1px 1px 3px, solid dashed solid, red green blue),
// /         (1px solid red, 1px dashed green, 3px solid blue));
// /     }
// /   }
test-module($name)
  $_true-context.value = null
  
  _true-module-start($name)
  {block}
  _true-module-stop()




// Describe
//  --------
// / Describe the unit to be tested.
// / This works just like a test module,
// / allowing you to group one or more related tests.
// / @alias test-module
// / @group api-test
// / @param {string} $name - module name
// / @content Include all the tests that are part of this module
// / @example scss
// /   @include describe('zip [function]') {
// /     // Test 1
// /     @include it('Returns two lists zipped together') {
// /       @include assert-equal(
// /         zip(a b c, 1 2 3),
// /         (a 1, b 2, c 3));
// /     }
//
// /     // Test 2
// /     @include it('Returns three zipped lists') {
// /       @include assert-equal(
// /         zip(1px 1px 3px, solid dashed solid, red green blue),
// /         (1px solid red, 1px dashed green, 3px solid blue));
// /     }
// /   }
describe($name)
  +test-module($name)
    {block}



// Module Start
// ------------
/// Module start helper
/// @access private
/// @group private-test
/// @param {string} $name - module name
_true-module-start($name)
  _true-context-mixin(module, $name)
  // p($_true-context.value)
  $module-list = _true-context-all("module")

  $modules = $module-list[0]
  $length = length($module-list)

  if $length > 1
    for $i in (2)..($length)
      $modules = $modules + " :: " + $module-list[$i]
  _true-message("# Module: %s" % $modules, "comments")
  $underline = "----------"

  for $i in (1)..(str-length(inspect($modules)))
    $underline = "%s-" % $underline

  _true-message($underline, "comments")





// Module Stop
// -----------
/// Module stop helper
/// @access private
/// @group private-test
_true-module-stop()
  _true-update-stats-count("modules")
  _true-context-pop()
  _true-message("", "comments")
