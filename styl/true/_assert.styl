// assert-true($assert, $description)
// 
// **[public:{output}]** Assert that a parameter is truthy. - Empty lists and strings are excluded from default Stylus truthyness. Assertions are used inside the `test()` mixin
// 
// Weight: -10
// 
// <b>Parameters:</b>
// <ul>
// <li>$assert - <b>{any}</b> <b><i>Asserted value to test</i></b></li>
// <li>$description = null - <b>{string}</b> <b><i>Description of the assertion being tested. A `null` of `false` value generates a default description.</i></b></li>
// </ul>
//
// ~
// 
// **Usage:**
// ```stylus
// +test('Non-empty strings are truthy') {
//   assert-true(
//     'Hello World',
//     'You can optionally describe the assertion...'
//   );
// }
// ```
//
// Styleguide Mixins.assert-true
assert-true($assert, $description = null) {
  $default = _true-context('test');
  $truthy = _true-is-truthy($assert);
  // $tmp = $description || $default;

  // _true-context-mixin('assert', '[assert-true] %s' % $tmp);
  _true-context-mixin('assert', '[assert-true]');
  _true-assert-results($truthy, true);
}

// assert-false($assert, $description)
// 
// **[public:{output}]** Assert that a parameter is falsey. - Empty lists and strings are added to default Stylus falseyness. to define the expected results of the test.
// 
// Weight: -10
// 
// <b>Parameters:</b>
// <ul>
// <li>$assert - <b>{any}</b> <b><i>Asserted value to test</i></b></li>
// <li>$description = null - <b>{string}</b> <b><i>Description of the assertion being tested. A `null` of `false` value generates a default description.</i></b></li>
// </ul>
//
// ~
// 
// **Usage:**
// ```stylus
// +test('Empty strings are falsey') {
//   assert-false(
//     '',
//     'You can optionally describe the assertion...'
//   );
// }
// ```
//
// Styleguide Mixins.assert-false
assert-false($assert, $description = null) {
  $default = _true-context('test');
  $falsey = !_true-is-truthy($assert);
  // $tmp = $description || $default;

  // _true-context-mixin('assert', '[assert-false] %s' % $tmp);
  _true-context-mixin('assert', '[assert-false]');
  _true-assert-results($falsey, true);
}


// assert-equal($assert, $expected, $description, $inspect)
// 
// **[public:{output}]** Assert that two parameters are `equal` Assertions are used inside the `test()` mixin to define the expected results of the test.
// 
// Weight: -10
// 
// <b>Parameters:</b>
// <ul>
// <li>$assert - <b>{any}</b> <b><i>Asserted value to test</i></b></li>
// <li>$expected - <b>{any}</b> <b><i>Expected mismatch</i></b></li>
// <li>$description = null - <b>{string}</b> <b><i>Description of the assertion being tested. A `null` of `false` value generates a default description.</i></b></li>
// <li>$inspect = false - <b>{boolean}</b> <b><i>Optionally compare inspected values (useful for comparing CSS output rather than Stylus values)</i></b></li>
// </ul>
//
// ~
// 
// **Usage:**
// ```stylus
// +test('Division works as expected in Stylus') {
//   assert-equal(
//     8 / 2,
//     4,
//     'You can optionally describe the assertion...'
//   );
// }
// ```
//
// Styleguide Mixins.assert-equal
assert-equal($assert, $expected, $description = null, $inspect = false) {
  $default = _true-context('test');

  if ($inspect) {
    $assert = s('%s' % $assert);
    $expected = s('%s' % $expected);
  }

  // $tmp = $description || $default;

  // _true-context-mixin('assert', '[assert-equal] %s' % $tmp);
  _true-context-mixin('assert', '[assert-equal]');
  _true-assert-results($assert, $expected);
}

// assert-unequal($assert, $expected, $description, $inspect)
// 
// **[public:{output}]** Assert that two parameters are `unequal` Assertions are used inside the `test()` mixin to define the expected results of the test.
// 
// Weight: -10
// 
// <b>Parameters:</b>
// <ul>
// <li>$assert - <b>{any}</b> <b><i>Asserted value to test</i></b></li>
// <li>$expected - <b>{any}</b> <b><i>Expected mismatch</i></b></li>
// <li>$description = null - <b>{string}</b> <b><i>Description of the assertion being tested. A `null` of `false` value generates a default description.</i></b></li>
// <li>$inspect = false - <b>{boolean}</b> <b><i>Optionally compare inspected values (useful for comparing CSS output rather than Stylus values)</i></b></li>
// </ul>
//
// ~
// 
// **Usage:**
// ```stylus
// +test('Strings and numbers hare not the same') {
//   assert-unequal(
//     1em,
//     '1em'
//   );
// }
// ```
//
// Styleguide Mixins.assert-unequal
assert-unequal($assert, $expected, $description = null, $inspect = false) {
  $default = _true-context('test');

  if ($inspect) { 
    $assert = s('%s' % $assert);
    $expected = s('%s' % $expected);
  }

  $tmp = $description || $default;

  // _true-context-mixin('assert', '[assert-unequal] %s' % $tmp);
  _true-context-mixin('assert', '[assert-unequal]');
  _true-assert-results($assert, $expected, 'unequal');
}

// assert($description = null)
// 
// **[public:{output}]** Define a CSS-output assertion. Assertions are used inside the `test()` mixin to define the expected results of the test. - The `assert()` mixin is a wrapper, and should contain one `output()` block and one `expect()` block as nested contents. - These three mixins together describe a single `assert-equal` comparison on output CSS. The compiled CSS-results of the `output()` mixin will be compared against the results of the `expect()` mixin. - When using Mocha integration, the output comparison is automated – otherwise you will have to compare the output manually. Using `git diff` is a great way to watch for changes in output.
// 
// Weight: -10
// 
// <b>Parameters:</b>
// <ul>
// <li>$description = null - <b>{string}</b> <b><i>Description of the assertion being tested. A `null` of `false` value generates a default description.</i></b></li>
// <li>{block} - <b><i>Use `output()` and `expect()` mixins to define blocks for comparison</i></b></li>
// </ul>
//
// ~
// 
// **Usage:**
// ```stylus
// +test('Stylus math compiles before output') {
//   +assert('You can also describe the assertion...') {
//     +output() {
//       width: 14em + 2;
//     }
//     +expect() {
//       width: 16em;
//     }
//   }
// }
// ```
//
// Styleguide Mixins.assert
assert($description = null) {
  $default = _true-context('test');
  $tmp = $description || $default;

  _true-output-context('assert');
  // _true-context-mixin('assert', '[output] %s' % $tmp);
  _true-context-mixin('assert', '[output]');
  _true-message(' ASSERT: %s ' % $description, 'comments');

  {block};

  _true-output-context(null);
  _true-update-test('output-to-css');
  _true-update-stats-count('assertions');
  // _true-context-pop();
  _true-message(' END_ASSERT ', 'comments');
}

// output($selector)
// 
// **[public:{output}]** Describe the expected results of the paired `output()` block. The `expect()` mixin requires a content block, and should be nested inside the `assert()` mixin, along with a single `output()` block. Assertions are used inside the `test()` mixin to define the expected results of the test. - These three mixins together describe a single `assert-equal` comparison on output CSS. The compiled CSS-results of the `output()` mixin will be compared against the results of the `expect()` mixin. - When using Mocha integration, the output comparison is automated – otherwise you will have to compare the output manually. Using `git diff` is a great way to watch for changes in output.
// 
// Weight: -10
// 
// <b>Parameters:</b>
// <ul>
// <li>$selector = true - <b>{boolean}</b> <b><i>Optionally wrap the contents in a `.test-output` selector block, so you can test property-value output directly.</i></b></li>
// <li>{block} - <b><i>Define the test content to be checked</i></b></li>
// </ul>
//
// ~
// 
// **Usage:**
// ```stylus
// +test('Stylus math compiles before output') {
//   +assert() {
//     +output() {
//       width: 14em + 2;
//     }
//     +expect() {
//       width: 16em;
//     }
//   }
// }
// ```
//
// Styleguide Mixins.output
output($selector = true) {
  _true-output-context('output');
  _true-message(' OUTPUT ', 'comments');

  if ($selector) {
    .test-output {
      {block};
    }
  } else {
    {block};
  }

  _true-message(' END_OUTPUT ', 'comments');
}


// expect($selector)
// 
// **[public:{output}]** Describe the expected results of the paired `output()` block. The `expect()` mixin requires a content block, and should be nested inside the `assert()` mixin, along with a single `output()` block. Assertions are used inside the `test()` mixin to define the expected results of the test. - These three mixins together describe a single `assert-equal` comparison on output CSS. The compiled CSS-results of the `output()` mixin will be compared against the results of the `expect()` mixin. - When using Mocha integration, the output comparison is automated – otherwise you will have to compare the output manually. Using `git diff` is a great way to watch for changes in output.
// 
// Weight: -10
// 
// <b>Parameters:</b>
// <ul>
// <li>$selector = true - <b>{boolean}</b> <b><i>Optionally wrap the contents in a `.test-output` selector block, so you can test property-value output directly.</i></b></li>
// <li>{block} - <b><i>Define the expected results of a sibling `output()` mixin</i></b></li>
// </ul>
//
// ~
// 
// **Usage:**
// ```stylus
// +test('Stylus math compiles before output') {
//   +assert() {
//     +output() {
//       width: 14em + 2;
//     }
//     +expect() {
//       width: 16em;
//     }
//   }
// }
// ```
//
// Styleguide Mixins.expect
expect($selector = true) {
  _true-output-context('expect');
  _true-message(' EXPECTED ', 'comments');

  if ($selector) {
    .test-output {
      {block};
    }
  } else {
    {block};
  }

  _true-message(' END_EXPECTED ', 'comments');
}

// contains($selector)
// 
// **[public:{output}]** Describe the expected results of the paired `output()` block. The `contains()` mixin requires a content block, and should be nested inside the `assert()` mixin, along with a single `output()` block. Assertions are used inside the `test()` mixin to define the expected results of the test. - These three mixins together describe a single comparison on output CSS. The compiled CSS-results of the `contains()` mixin will be compared against the results of the `output()` mixin to see if all of the `contains` CSS is within the `output` CSS. - When using Mocha integration, the output comparison is automated – otherwise you will have to compare the output manually. Using `git diff` is a great way to watch for changes in output.
// 
// Weight: -10
// 
// <b>Parameters:</b>
// <ul>
// <li>$selector = true - <b>{boolean}</b> <b><i>Optionally wrap the contents in a `.test-output` selector block, so you can test property-value output directly.</i></b></li>
// <li>{block} - <b><i>Include any content that are part of this test</i></b></li>
// </ul>
//
// ~
// 
// **Usage:**
// ```stylus
// +test('Stylus math compiles before output') {
//   +assert() {
//     +output() {
//       height: 100%;
//       width: 14em + 2;
//     }
//     +contains() {
//       width: 16em;
//     }
//   }
// }
// ```
//
// Styleguide Mixins.contains
contains($selector = true) {
  _true-output-context('contains');
  _true-message(' CONTAINED ', 'comments');

  if ($selector) {
    .test-output {
      {block};
    }
  } else {
    {block};
  }

  _true-message(' END_CONTAINED ', 'comments');
}

// $map = { asserts }
// 
// **[private]** Variable to store asserts.
// 
// Weight: -0
// 
// $asserts = () - **{string[]}** ***List of asserts***
// 
// Styleguide Variables.$map
$map = {
  asserts: ()
}

// _true-assert-results($assert, $expected, $unequal, $terminal)
// 
// **[private:{output}]** Get an official result, record it in the database and output, provide details as necessary, and end the assertion.
// 
// Weight: 0
// 
// $assert - **{any}** ***Value to consider***
// $expected - **{any}** ***Expected match***
// $unequal = false - **{boolean}** ***Set to `true` if the comparison is expected to fail***
// $terminal = $true-terminal-output.value.value - **{boolean}** ***Whether in case of failing it should output to terminal***
// 
// Styleguide Mixins.__true-assert-results
_true-assert-results($assert, $expected, $unequal = false, $terminal = $true-terminal-output.value) {
  $result = _true-get-result($assert, $expected, $unequal);

  if ($result == 'pass') {
    _true-pass-details();
  } else {
    _true-fail-details($assert, $expected, $terminal);
  }

  _true-update-test($result);
  _true-update-stats-count('assertions');
  // _true-context-pop();
}

// _true-is-truthy($assert)
// 
// **[private:{boolean}]** Check that a value is truthy (empty lists and strings return false)
// 
// Weight: 0
// 
// $assert - **{any}** ***Value to consider***
// 
// Styleguide Functions._true-is-truthy
_true-is-truthy($assert) {
  $not = !!$assert;
  $list = $assert != ();
  $string = $assert != '';
  $truthy = ($not && $list && $string) ? true : false;

  return $truthy;
}