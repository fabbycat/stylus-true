// test($name)
// 
// **[public:void]** Test start helper
// 
// Weight: -10
// 
// <ul>
// <li>$name - <b>{string}</b> <i>Describe what is being tested</i></li>
// <li>{block} - Include any assertions that are part of this test</li>
// </ul>
//
//~
// 
// **Example**:
// <pre class="code">+test('Returns lists zipped together') {
//     assert-equal(
//       zip(a b c, 1 2 3),
//       (a 1, b 2, c 3)
//     );
//     +assert-equal(
//       zip(1px 1px 3px, solid dashed solid, red green blue),
//       (1px solid red, 1px dashed green, 3px solid blue)
//     );
// }</pre>
//
// Styleguide Mixins.test
test($name) {
  _true-test-start($name);

  {block};

  _true-test-stop();
}


// it($name)
// 
// **[public:void]** Describe the behavior being tested. This works just like `test()`
// 
// Weight: -10
// 
// Parameters:
// <ul>
// <li>$name - <b>{string}</b> <i>Describe what is being tested</i></li>
// <li>{block} - Include any assertions that are part of this test</li>
// </ul>
//
// **Example**:
// ```stylus
// +it('Returns lists zipped together') {
//     assert-equal(
//       zip(a b c, 1 2 3),
//       (a 1, b 2, c 3)
//     );
//     +assert-equal(
//       zip(1px 1px 3px, solid dashed solid, red green blue),
//       (1px solid red, 1px dashed green, 3px solid blue)
//     );
// }
// ```
//
// Styleguide Mixins.it
it($name) {
  +test($name) {
    {block};
  }
}

// _true-test-start($name)
// 
// **[private:void]** Test start helper
// 
// Weight: -10
// 
// $name - **{string}** ***Describe what is being tested***
// 
// Styleguide Functions._true-test-start
_true-test-start($name) {
  _true-context-mixin('test', $name);
  _true-message('Test: %s' % $name, 'comments');
}

// _true-test-stop()
// 
// **[private:void]** Test stop helper
// 
// Weight:0
// 
// Styleguide Functions._true-test-stop
_true-test-stop() {
  _true-update($_true-test-result.value);
  _true-update-stats-count('tests');
  // _true-context-pop();
  _true-message('', 'comments');
}
